plot(cars)
seq (1,9)
z <- 9
seq (z, 1, z/3)
clearPushBack()
clearPushBack(z)
z <- z
aeori
aerfoiea9jr
eafe
ajeiajf
aejef
ijajfi
library (tidyverse)
# Evaluate conditional statements based on the temperature of porridge
# Set an initial temperature value for the porridge
porridge_temp <- 125
# If the porridge temperature exceeds a given threshold, enter the code block
if (porridge_temp > 120) {
print("this porridge is too hot")
}
# Alternatively, you can store a condition (as a TRUE/FALSE value)
# in a variable
too_cold <- porridge_temp < 70
# If the condition `too_cold` is TRUE, enter the code block
if (too_cold) {
print("this food is too cold")
}
# Alternatively, you can store a condition (as a TRUE/FALSE value)
# in a variable
too_cold <- porridge_temp < 70
# If the condition `too_cold` is TRUE, enter the code block
if (too_cold) {
print("this food is too cold")
}
# Alternatively, you can store a condition (as a TRUE/FALSE value)
# in a variable
too_cold <- porridge_temp < 70
# If the condition `too_cold` is TRUE, enter the code block
if (too_cold) {
print("this food is too cold")
}
# Function to determine if you should eat porridge
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "this is too hot!"
}else if (temp < 70){
status <- "this is too cold!"
}else {
status <- "this is just right!"
}
status
}
test_food_temp(217)
test_food_temp(71)
# Use the `c()` function to create a vector of character values
people <- c("Sarah", "Amit", "Zhang")
print (people)
# Use the `c()` function to create a vector of numeric values
numbers <- c(1, 2, 3, 4, 5)
print(numbers)
# Create and measure the length of a vector of character elements
lenght(people)
# Create and measure the length of a vector of character elements
length(people)
# Create and measure the length of a vector of numeric elements
length(numbers)
# Use the `seq()` function to create a vector of numbers 1 through 70
one_to_seventy <- seq(1, 70)
print (one_to_seventy)
# Make vector of numbers 1 through 10, counting by 2
odds <- seq(1, 10, 2)
print(odds)
# Use the `seq()` function to create a vector of numbers 1 through 70
one_to_seventy(1:70)
# Use the `seq()` function to create a vector of numbers 1 through 70
one_to_seventy<-seq(1:70)
# Use the `seq()` function to create a vector of numbers 1 through 70
one_to_seventy<-seq(1:70)
one_to_seventy
# Create two vectors to combine
v1 <- c(3, 1, 4, 1, 5)
v2 <- c(1, 6, 8, 0)
# Create two vectors to combine
v1 <- c(3, 1, 4, 1, 5)
v2 <- c(1, 6, 1, 8, 0)
# Create arithmetic combinations of the vectors
v1 + v2
v1 - v2
v1*v2
v1 / v2
# Add a vector to itself (why not?)
v2 + v2
v1 ^ 3
# Create vectors to combine
v1 <- c(1,3,5,1,5)
v2<- c(1,2,1,2,1)
# Add vectors
v1 + v2
# Add a single value to a vector of values
v1 <- 1:5
v1 + 4
# Add a single value to a vector of values
v1 <- 1:5
v1 + 4
# Confirm that basic types are stored in vectors
is.character(andres)
# Confirm that basic types are stored in vectors
is.character(Andres)
# Confirm that basic types are stored in vectors
is.character("Andres")
# Create a vector of numbers
nums <- c(3,98,10.8,3.27,5.21)
# Perform the vectorized operation
rounded_nums <- round(nums,1)
# Print the results (each element is rounded)
print (rounded_nums)
# Create a vector of numbers
nums <- c(3.98,10.8,3.27,5.21)
# Perform the vectorized operation
rounded_nums <- round(nums,1)
# Print the results (each element is rounded)
print (rounded_nums)
# Create a character variable `introduction`, then count the number of characters
introduction <- "hello"
nchar(introduction)
# Create a vector of `introductions`, then count the characters in each element
person<- list(
first_name= "Ada",
job= "Programmer",
salary = 78000,
in_union= TRUE
)
person<- list(
first_name= "Ada",
job= "Programmer",
salary = 78000,
in_union= TRUE,
favorites= list(
music = "jazz",
food = "pizza"
)
)
print(person)
#call a built in data frame
cars
class(cars)
dim(cars)
library(tidyverse)
library(nycflights13)
install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
library(tidyverse)
library(nycflights13)
knitr::include_graphics("https://raw.githubusercontent.com/reisanar/figs/master/flights13.png")
flights
knitr::include_graphics("https://raw.githubusercontent.com/reisanar/figs/master/tidyverse-packages.png")
knitr::include_graphics(
c("https://raw.githubusercontent.com/reisanar/figs/master/dplyr-new-old.png")
)
filter(flights, month==1, day==1)
knitr::include_graphics("https://raw.githubusercontent.com/reisanar/figs/master/tidyverse-packages.png")
knitr::include_graphics(
c("https://raw.githubusercontent.com/reisanar/figs/master/dplyr-new-old.png")
)
filter(flights, month==11, month==12)
filter(flights, month==11 or month==12)
filter(flights, month== 11  month== 12)
filter(flights, month== 11 _or_ month== 12)
filter(flights, month %in% c(11,12))
filter(flights, month== 11 | month== 12)
filter(flights, dest %in% c(MCO, TPA))
filter(flights, dest %in% c("MCO", "TPA"))
my_name <- "Andres Cortes"
name_length <- nchar(my_name)
paste
paste(name_length)
now_doing <- paste(my_name,"is programming")
toupper(now_doing)
fav_1 <- fav_1/sqrt(201)
fav_1 <- 12
fav_2 <- 9
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
Sum(fav_1, fav_2)
sum(fav_1, fav_2)
raw_sum <- sum(fav_1, fav_2)
round_sum <- round(raw_sum, 1)
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
sum_round <- sum(round_1, round_2)
max(sum_round, round_sum)
is_twice_as_long <- function(str1, str2){
diff <- abs(nchar(str1)-nchar(str2))
min_length <- min(nchar(str1), nchar(str2))
}
is_twice_as_long <- function(str1, str2){
diff <- abs(nchar(str1)-nchar(str2))
min_length <- min(nchar(str1), nchar(str2))
}
is_twice_as_long("Hello","Hi")
is_twice_as_long <- function(str1, str2){
diff <- abs(nchar(str1)-nchar(str2))
min_length <- min(nchar(str1), nchar(str2))
diff >= min_length #if difference is more than short
}
is_twice_as_long("Hello","Hi")
is_twice_as_long("Hi","Hello")
is_twice_as_long("Hi","Hi")
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", diff, "characters")
}
sentence
}
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", diff, "characters")
}
sentence
}
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", diff, "characters")
}
sentence
}
describe_difference("hello", "hi")
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", diff, "characters")
}
sentence
}
describe_difference("Hi", "Hello")
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", -diff, "characters")
}
sentence
}
describe_difference("Hi", "Hello")
describe_difference <- function(first, second){
diff <- nchar(first)- nchar(second)
if(diff> 0){
sentence<- paste("Your first string is longer by", diff , "characters")
}else if(diff< 0){
sentence<- paste("Your second string is longer by", -diff, "characters")
}else{
sentence<- paste("Your strings are the same length!")
}
sentence
}
describe_difference("Hello", "Hi")
describe_difference("Hi", "Hello")
describe_difference("hi", "hi")
